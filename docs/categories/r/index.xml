<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on R, it&#39;s OK I guess</title>
    <link>/categories/r/</link>
    <description>Recent content in R on R, it&#39;s OK I guess</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding the result of a chisquare test</title>
      <link>/2020/03/14/understanding-the-result-of-a-chisquare-test/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/14/understanding-the-result-of-a-chisquare-test/</guid>
      <description>Introduction A chisquare test can be used for assessing whether there is association between two categorical variables. The problem it has is that knowing that an association exists is only part of the story; we want to know what is making the association happen. This is the same kind of thing that happens with analysis of variance: a significant \(F\)-test indicates that the group means are not all the same, but not which ones are different.</description>
    </item>
    
    <item>
      <title>Distance between clusters</title>
      <link>/2019/04/23/distance-between-clusters/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/23/distance-between-clusters/</guid>
      <description>Packages library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.1.1 ✔ purrr 0.3.2 ## ✔ tibble 2.1.1 ✔ dplyr 0.8.0.1 ## ✔ tidyr 0.8.3.9000 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.3.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(spatstat) ## Loading required package: spatstat.data ## Loading required package: nlme ## ## Attaching package: &amp;#39;nlme&amp;#39; ## The following object is masked from &amp;#39;package:dplyr&amp;#39;: ## ## collapse ## Loading required package: rpart ## ## spatstat 1.</description>
    </item>
    
    <item>
      <title>A miscellany: mutate_at, rename_at, str_replace and summary</title>
      <link>/2019/03/06/a-miscellany-mutate-at-rename-at-str-replace-and-summary/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/03/06/a-miscellany-mutate-at-rename-at-str-replace-and-summary/</guid>
      <description>Packages library(MASS) library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.1.0 ✔ purrr 0.3.1 ## ✔ tibble 2.0.1 ✔ dplyr 0.8.0.1 ## ✔ tidyr 0.8.3 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.3.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ✖ dplyr::select() masks MASS::select()  Introduction Take a look at this data set:</description>
    </item>
    
    <item>
      <title>Estimating sigma using quantiles</title>
      <link>/2018/12/13/estimating-sigma-using-quantiles/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/13/estimating-sigma-using-quantiles/</guid>
      <description>Packages There will be some R later, with some random number generation. I set the random number seed for reproducibility:
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 3.1.0 ✔ purrr 0.3.0 ## ✔ tibble 2.0.1 ✔ dplyr 0.7.8 ## ✔ tidyr 0.8.2 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.3.0 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() set.</description>
    </item>
    
    <item>
      <title>Scraping Icelandic soccer results with rvest and selenium</title>
      <link>/2018/09/01/scraping-icelandic-soccer-results-with-rvest-and-selenium/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/09/01/scraping-icelandic-soccer-results-with-rvest-and-selenium/</guid>
      <description>Introduction The other day, I wanted to download all of this season’s results in the Icelandic soccer league. I’m sure you often want to do this. Or, more seriously, you want to grab something from a web page, but something is standing in the way of making it simple. In this post, we explore the use of rvest for this task, along with RSelenium, which we need for the more sophisticated stuff later.</description>
    </item>
    
    <item>
      <title>Dates and lubridate</title>
      <link>/2018/08/04/dates-and-lubridate/</link>
      <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/04/dates-and-lubridate/</guid>
      <description>Did somebody say dates? Well, actually not those. I meant the other kind.
 Some birth dates Let’s suppose that we have some people and their birth dates, and we want to know how old they are:
cat dates.csv ## date,date_words,id ## 2007-09-04,September 4 2007,M ## 1963-09-24,September 24 1963,Dad ## 1970-06-01,June 1 1970,Mom There are three people (who may or may not be real), and their birth dates are expressed two ways, once as year-month-day, and once in English with month names.</description>
    </item>
    
    <item>
      <title>Testing means and medians</title>
      <link>/2018/08/04/testing-means-and-medians/</link>
      <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/04/testing-means-and-medians/</guid>
      <description>Introduction The data set that inspired this post comes from this edition of Mendenhall and Sincich. It comes from an investigation of how you learn people’s names effectively. 139 students were randomly divided into three groups, and had to learn the first and last names of all the people in the group they had been randomized to (between 40 and 50 other students). The study investigated three methods of learning names:</description>
    </item>
    
    <item>
      <title>How to change the significant digits in a tibble</title>
      <link>/2018/07/13/how-to-change-the-significant-digits-in-a-tibble/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/13/how-to-change-the-significant-digits-in-a-tibble/</guid>
      <description>packages library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.3.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(lubridate) ## ## Attaching package: &amp;#39;lubridate&amp;#39; ## The following object is masked from &amp;#39;package:base&amp;#39;: ## ## date  Introduction When you display a tibble, or a data frame as a tibble, it is made to look nice and to show the most important digits.</description>
    </item>
    
    <item>
      <title>Tidy matched pairs t-test</title>
      <link>/2018/06/13/tidy-matched-pairs-t-test/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/13/tidy-matched-pairs-t-test/</guid>
      <description>Introduction The matched pairs \(t\)-test is for comparing two measurements obtained on the same individual, such as a before and an after measurement. This is different from the two-sample \(t\)-test, which has two independent sets of measurements, one for each experimental condition, with each set collected on different individuals. The matched-pairs \(t\)-test is typically the first time we meet repeated-measures data (more than one measurement on the same individual, collected at different times or under different conditions), but we sidestep having to learn anything too new by looking at the difference between the two measurements on the same individual, thus turning the two measurements for each individual into one.</description>
    </item>
    
    <item>
      <title>Ken ventures into community ecology</title>
      <link>/2018/05/17/ken-ventures-into-community-ecology/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/17/ken-ventures-into-community-ecology/</guid>
      <description>Introduction Somebody mentioned ANOSIM to me, and I had this kind of vague recollection of it, meaning that I didn’t really understand anything of it at all. This prompted me to explore further, which got me into the vegan package. This contains a number of functions for handling ecological community data. One of these is anosim, or “analysis of similarity”, which is used for assessing the groupings of objects when we have only a dissimilarity matrix: are the objects within a group more similar than ones in different groups?</description>
    </item>
    
    <item>
      <title>Simulation, the tidy way</title>
      <link>/2018/05/14/simulation-the-tidy-way/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/14/simulation-the-tidy-way/</guid>
      <description>Packages I’m using this, and also doing some random number generation, which I’d like to be reproducible:
library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.3.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() set.</description>
    </item>
    
    <item>
      <title>Rating rugby league with Stan</title>
      <link>/2018/05/01/rating-rugby-league-with-stan/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/01/rating-rugby-league-with-stan/</guid>
      <description>What’s in here This is a rather long and complicated post. Here are some of the things you’ll find here:
 about rugby league extracting data from text making dates with lubridate and using fill to copy them to empty rows tidyr::extract making a Bayesian model with Stan rstan using left_join to look up values in another table fct_reorder and ordering boxplots by median   Introduction Rugby league is one of the “football” family of sports, in which players gain ground by carrying and passing and kicking the ball (like rugby union, North American football and somewhat like Australian and Gaelic football).</description>
    </item>
    
    <item>
      <title>Purrr and map: an introduction</title>
      <link>/2018/04/19/purrr-and-map-an-introduction/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/19/purrr-and-map-an-introduction/</guid>
      <description>Packages The usual, plus broom for later:
library(tidyverse) ## ── Attaching packages ──────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.3.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ─────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(broom)  “For each” One of the commonest programming tasks is to do something “for each” of something else.</description>
    </item>
    
    <item>
      <title>Tidy chi-squared testing</title>
      <link>/2018/04/12/tidy-chi-squared-testing/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/12/tidy-chi-squared-testing/</guid>
      <description>Introduction R has the creaky old functions table and chisq.test for counting up frequencies and doing chi-squared tests for association. They work, but there is nothing very tidyverse or elegant about them. Nonetheless, if we organize things right, we can use them in a tidy way, with everything working with data frames and pipelines.
 Packages I use broom later for tidy output:
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.</description>
    </item>
    
    <item>
      <title>Ordered alternatives in ANOVA</title>
      <link>/2018/04/11/ordered-alternatives-in-anova/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/11/ordered-alternatives-in-anova/</guid>
      <description>Introduction Standard analysis of variance, and nonparametric alternatives to it such as the Kruskal-Wallis test, test a null hypothesis of “all the groups have the same mean” against a vague alternative of “two or more of the groups have different means”. We typically carry out ANOVA in two stages: do the \(F\)-test or Kruskal-Wallis, and, having rejected the null that all the groups are the same, then carry out a multiple-comparisons method such as Tukey’s to determine which groups differ from which.</description>
    </item>
    
    <item>
      <title>Name your code chunks!</title>
      <link>/2018/04/08/name-your-code-chunks/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/08/name-your-code-chunks/</guid>
      <description>Blogdown is amazing, but there is one thing that tripped me up, and I just worked out why.
I have lots of graphs in my posts, but I was sometimes getting the wrong ones, and I was wondering why that was. I took a look in the Git pane in R Studio and discovered something.
If you make a graph like this with an unnamed code chunk
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.</description>
    </item>
    
    <item>
      <title>Simpson&#39;s paradox, log-linear modelling, and the tidyverse</title>
      <link>/2018/04/07/simpson-s-paradox-log-linear-modelling-and-the-tidyverse/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/07/simpson-s-paradox-log-linear-modelling-and-the-tidyverse/</guid>
      <description>Introduction I have some data on punctuality of arrivals at five different airports for two different airlines, thus:
 Alaska Airlines America West airport ontime delayed ontime delayed LosAngeles 497 62 694 117 Phoenix 221 12 4840 415 SanDiego 212 20 383 65 SanFrancisco 503 102 320 129 Seattle 1841 305 201 61 There are three variables: airport, airline and whatever the name is of the variable containing ontime and delayed (I’ll call it status).</description>
    </item>
    
    <item>
      <title>R, it&#39;s OK I guess</title>
      <link>/2018/04/05/r-it-s-ok-i-guess/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/05/r-it-s-ok-i-guess/</guid>
      <description>On a dare from @dataandme and @littlemissdata, last night I bought the domain ritsokiguess.site, and now this blog lives there (as well as at the old nxskok.github.io, which is the “actual” home for the site). I used, extensively, Brooke Watson’s guide, for which many thanks. There seems to need to be a two-way connection between where the static website actually lives, and where it looks to the outside world as if it lives.</description>
    </item>
    
    <item>
      <title>Ward&#39;s method and dissimilarities</title>
      <link>/2018/03/22/ward-s-method-and-dissimilarities/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/22/ward-s-method-and-dissimilarities/</guid>
      <description>Introduction I don’t know yet where this post is going. Think of it, for now, as a ramble through cluster analysis. I may eventually figure out what to do with it, but I don’t want to delete what I have written just yet.
Hierarchical clustering is a way of forming groups or “clusters” of like individuals. The various forms of hierarchical clustering work from distances or dissimilarilities between individuals. The process is to start from each individual in a cluster by itself and then to join the closest pair of clusters one by one until all individuals are in a single cluster.</description>
    </item>
    
    <item>
      <title>Readr and summary</title>
      <link>/2018/03/21/readr-and-summary/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/21/readr-and-summary/</guid>
      <description>Packages In this post I use these packages (the last one at the end):
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.3.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(skimr) ## ## Attaching package: &amp;#39;skimr&amp;#39; ## The following objects are masked from &amp;#39;package:dplyr&amp;#39;: ## ## contains, ends_with, everything, matches, num_range, one_of, ## starts_with  Introduction The readr file-reading functions read text as text without turning it into factors.</description>
    </item>
    
    <item>
      <title>Working my way back to you, a re-investigation of rstan</title>
      <link>/2018/02/28/working-my-way-back-to-you-a-re-investigation-of-rstan/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/28/working-my-way-back-to-you-a-re-investigation-of-rstan/</guid>
      <description>Introduction I learned Stan a while back, when I was fitting some Bayesian models. I wanted to fix up one of them, and I realized that I had forgotten most of what I knew about Stan, so I had to go back and learn it again.
A Bayesian model has two parts: a prior distribution, which summarizes your belief about the parameters you are trying to estimate before you look at any data, and a model that asserts the data-generating mechanism conditional on the parameter value(s).</description>
    </item>
    
    <item>
      <title>Making a lot of plots all at once, the tidyverse way</title>
      <link>/2018/02/23/making-a-lot-of-plots-all-at-once-the-tidyverse-way/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/23/making-a-lot-of-plots-all-at-once-the-tidyverse-way/</guid>
      <description>Introduction I was thinking the other day about how you might come up with a bunch of separate-but-related plots, without plotting them one by one, for example to show a class.
By way of example, suppose we want to plot a number of Poisson distributions with different means, so that we can compare their shapes. The textbook says that a Poisson with a large mean is “approximately normal”, but that is just words until you see it on a picture.</description>
    </item>
    
    <item>
      <title>On crossing the rubicon, or how never to use expand.grid again</title>
      <link>/2018/02/18/crossing-or-how-never-to-use-expand-grid-again/</link>
      <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/18/crossing-or-how-never-to-use-expand-grid-again/</guid>
      <description>Packages The usual:
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.7.2 ✔ stringr 1.2.0 ## ✔ readr 1.1.1 ✔ forcats 0.2.0 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag()  Introduction Let’s use some data on Australian elite athletes, which can be found here:</description>
    </item>
    
    <item>
      <title>Tidy simple effects in analysis of variance</title>
      <link>/2018/01/30/tidy-simple-effects-in-analysis-of-variance/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/30/tidy-simple-effects-in-analysis-of-variance/</guid>
      <description>Introduction In two-way analysis of variance, the (continuous) response variable depends on two explanatory factors, say A and B. These factors might have an additive effect, in which case you can talk unambiguously about “the effect of factor A”, but the effect of factor A might be different depending on what level of factor B you are looking at. In that case, factors A and B are said to have an interaction.</description>
    </item>
    
    <item>
      <title>Displaying grouped bar charts in ggplot</title>
      <link>/2018/01/20/displaying-grouped-bar-charts-in-ggplot/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/20/displaying-grouped-bar-charts-in-ggplot/</guid>
      <description>Introduction When you have two categorical variables to plot, grouped bar charts are one possible visualization. I learned something new about them today, from Hadley Wickham himself (well, via a tweet, anyway).
As an example, let’s use some data from the Australian Institute for Sport:
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.1 ✔ dplyr 0.7.4 ## ✔ tidyr 0.</description>
    </item>
    
    <item>
      <title>Drawing a network with ggraph and tidygraph</title>
      <link>/2017/12/30/drawing-a-network-with-ggraph-and-tidygraph/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/30/drawing-a-network-with-ggraph-and-tidygraph/</guid>
      <description>Introduction Thomas Lin Pedersen is the author of a lot of packages, including two that deal with graphs (in the sense of networks), tidygraph for storing and handling graphs, and ggraph for drawing them, ggplot-style. I have a feeling I will be spending a lot of time with tidygraph, but in this post, I get my feet wet reading in and storing a graph and then making a picture of it.</description>
    </item>
    
    <item>
      <title>Installing R 3.4 on your Android phone</title>
      <link>/2017/12/30/installing-r-3-4-on-your-android-phone/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/30/installing-r-3-4-on-your-android-phone/</guid>
      <description>Introduction David Selby, on his blog, explains how to get R up and running on your Android phone (and, by way of proof, wrote the blog post concerned on his phone). Unfortunately, however, he was only able to install R 3.1.1, which means that some of the latest tidyverse goodies are not available. Can we do better? It is possible. Maybe.
 Installation on the Android phone We begin by installing two Android apps, which can both be found on Google Play.</description>
    </item>
    
    <item>
      <title>Tidying weather data</title>
      <link>/2017/11/23/tidying-weather-data/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/23/tidying-weather-data/</guid>
      <description>Introduction Weather data often comes in an untidy format that is suitable for looking at, but not so suitable for doing any kind of analysis with. Let’s have a look at the kind of thing I mean. But before we do that, we need a package or two:
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 ## ✔ tibble 1.3.4 ✔ dplyr 0.</description>
    </item>
    
    <item>
      <title>Chuff chuff: using rvest with web forms</title>
      <link>/2017/11/20/chuff-chuff-using-rvest-with-web-forms/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/20/chuff-chuff-using-rvest-with-web-forms/</guid>
      <description>Introduction We are very accustomed to journey planners that help us navigate across the city, the country or the world. Google’s transit directions are an example: you enter a start and an end point, and it tells you which vehicles to get and where to transfer to another one. Nowadays, this is a commonplace. But back in 1989, the idea of “shortest path” was an idea in the minds of graph theorists, not a practical way to get from one place to another.</description>
    </item>
    
    <item>
      <title>Scraping Manhattan with rvest</title>
      <link>/2017/09/18/scraping-a-bar-chart-with-rvest/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/09/18/scraping-a-bar-chart-with-rvest/</guid>
      <description>Introduction In cricket, a Manhattan chart records how many runs a team score in each over (and how many wickets fall). An example is here (scroll down to find it). Is it possible to extract the numbers of runs and wickets for each team from this graph?
The answer turns out to be “yes”, because this graph is an SVG graphic, and the data used to create it is embedded in the HTML code, so it is “simply” a matter of pulling it out.</description>
    </item>
    
    <item>
      <title>Safely, possibly</title>
      <link>/2017/09/07/safely-possibly/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/09/07/safely-possibly/</guid>
      <description>Introduction You know how, when you’re reading documentation, you nod sagely as you read some part, but when you come back to it later, you realize that you really don’t understand it at all. This happened to me with the purrr documentation. I mean, I could manage map and some of its variants, but when it came down to it, I really had no clue about safely and possibly. Until today, when I actually had a reason to study them.</description>
    </item>
    
    <item>
      <title>A brief foray into list-columns</title>
      <link>/2017/07/25/a-brief-foray-into-list-columns/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/25/a-brief-foray-into-list-columns/</guid>
      <description>Introduction Let’s suppose we are trying to find the median of a bunch of binomial distributions. ⊕This is a simplified version of an actual problem I had, but that one fails for some unconnected (and thus far unknown) reason, so I don’t want to show you that.
To be specific, let’s suppose we have these values of \(n\):
n=c(10,15,20) and these values of \(p\):
p=c(0.25,0.3,0.42) We’ll need the tidyverse, as usual:</description>
    </item>
    
    <item>
      <title>The Designated Hitter</title>
      <link>/2017/06/08/the-designated-hitter/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/08/the-designated-hitter/</guid>
      <description>Back in 1973, when the American League introduced the Designated Hitter rule, they were worried (among other things) about their league having fewer runs per game than the rival National League. So they introduced a rule whereby the pitcher (or any other nominated player) no longer had to bat, to be replaced by a player, the Designated Hitter, whose only job was to bat. Did that have the desired effect of increasing the total number of runs scored, compared to the National League, which has never had a Designated Hitter?</description>
    </item>
    
    <item>
      <title>Carter and Guthrie</title>
      <link>/2017/06/01/carter-and-guthrie/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/01/carter-and-guthrie/</guid>
      <description>Introduction Carter and Guthrie, in 2004, proposed a method of modelling cricket matches. Their aim was to provide an alternative method of deciding interrupted matches, in the manner of Duckworth and Lewis. What was interesting to me is that they estimate a probability of winning (which is then held fixed over interruptions), and it seemed to me that one could estimate and update the probability of winning as the game progresses, which would be a useful adjunct for spectators.</description>
    </item>
    
    <item>
      <title>Carter and Guthrie part 2: model-building</title>
      <link>/2017/06/01/carter-and-guthrie-part-2-model-building/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/01/carter-and-guthrie-part-2-model-building/</guid>
      <description>Estimating the parameters Start, as ever, with the tidyverse, along with MASS for modelling later:
library(MASS) library(tidyverse) ## ── Attaching packages ──────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1.9000 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.3.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## ── Conflicts ─────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ✖ dplyr::select() masks MASS::select() The model The Carter and Guthrie model is a simplified version of cricketing reality, thus:</description>
    </item>
    
  </channel>
</rss>